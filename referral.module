<?php
function referral_menu(){
  $items = array();
  
  //this creates a menu item and URL that will call the referrer set-up form.  Access given to anonymous users.
  $items['referrer'] = array(
    'description' => t('A form to set up a new referrer user record.'),
    'title' => t('Referrer registration'),
    'menu_name' => 'main-menu',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('referrer_setup'), //the name of the form here
    'access callback' => '_anon_check',
  );
  
  //menu item for "pending" acknowledgement of registration form submission.  Access given to anonymous users.
  //"pending" means email address provided does not match the organisation's domain, so account blocked. 
  $items['registration-pending'] = array(
    'description' => t('A response indicating partial registration as a referrer.'),
    'title' => t('Registration pending'),
    'page callback' => '_referrer_show_node', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('Registration pending'),
    'access callback' => '_anon_check',
  );
  
  //menu item for "confirmed" acknowledgement of registration form submission.  Access given to anonymous users.
  //"confirmed" means email address provided matches the organisation's domain, so account can be activated immediately. 
  $items['registration-confirmed'] = array(
    'description' => t('A response indicating complete registration as a referrer.'),
    'title' => t('Registration confirmed'),
    'page callback' => '_referrer_show_node', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('Registration confirmed'),
    'access callback' => '_anon_check',
  );
  
  return $items;
}

/**
 * Callback functiuon to load a page, using argument title provided as a page argument.
 */
function _referrer_show_node($page_title) {
  $nodes = node_load_multiple(NULL, array("title" => $page_title));
  $node = current($nodes);
  return node_page_view($node);
}

/**
 * Callback function for referrer registration form and acknowledgement pages - only anonymous users have access.
 */
function _anon_check() {
  return user_is_anonymous();
}
/**
  * Implements hook_init to add the list of associated organisations to the front page.
  * The placeholder string "-- Organisation list --" is replaced with a current list.
*/
function referral_init() {
  $org_vocab_object = taxonomy_vocabulary_machine_name_load('referring_organisations');
  $organisations = taxonomy_get_tree($org_vocab_object->vid, 0);
  $org_list = '<ul>';
  foreach ($organisations as $org){
  	$term_wrapper = entity_metadata_wrapper('taxonomy_term', $org -> tid);
    $org_name_flag = $term_wrapper -> field_organisation_title -> value();
	// If field_organisation_title is true the taxonomy name is an actual organisation
  	if ($org_name_flag) {
  	  $org_list .= '<li>' . $org->name . '</li>';
  	}
  }
  $org_list .= '</ul>';
  global $_front_page;
  $_front_page['data'] = str_replace('-- Organisation list --', $org_list, $_front_page['data']);
}

/**
  * Form to set up referrer as new user.
  * Name, email, phone captured. Organisation in stages: Thames Valley Police -> station; 
  * local authority -> authority name -> function; housing association -> association name.  
  * Additional police stations, authority functions and housing associations may be added via
  * "referring_organisations" taxonomy.
*/
function referrer_setup ($form, &$form_state) {
  if (!isset($form['#parents'])) {
    $form['#parents'] = array();
  }

  // Intro text
  $form['intro_text'] = array(
    '#markup' => t('<em>Provide your contact information below and press the "Register" button to open a referrer account.</em><br/>'),
    '#weight' => '0',
    '#prefix' => '<div class="form-item-intro-text">',
    '#suffix' => '</div>',
  );
  
  // First name
  $form['first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First name'),
    '#required' => TRUE,
    '#weight' => '1',
  );
	  
  // Last name
  $form['last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last name'),
    '#required' => TRUE,
    '#weight' => '2',
  );
  
  // Contact number requirement
  $form['contact_number'] = array(
    '#markup' => t('<em>Provide at least one contact number below:</em><br/>'),
    '#weight' => '3',
    '#prefix' => '<div class="form-item-contact-label">',
    '#suffix' => '</div>',
  );
  
  // Phone
  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone number'),
    '#description' => 'Prefix extension with "Xt"',
    '#weight' => '6',
  );
  
  // Mobile
  $form['mobile'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile number'),
    '#weight' => '7',
  );
  
  // Email1
  $form['email1'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address'),
    '#required' => TRUE,
    '#weight' => '8',
  );
  
  // Email2
  $form['email2'] = array(
    '#type' => 'textfield',
    '#title' => t('Repeat your email address'),
    '#required' => TRUE,
    '#weight' => '11',
  );
  
  // initialise the exit criterion for the form element do loop below
  $close_downstream = false;
  
  //Set up a container form element to provide an AJAX target that
  //enables update of all levels of the organisation taxonomy
  $form['cascade'] = array(
    '#type' => 'container',
	'#weight' => '18',
	'#prefix' => '<div id="cascade-div">',
    '#suffix' => '</div>',
  );
    
  // Loop down the taxonomy hierarchy until you get to a select box with no option 
  // selected or a taxonomy term with no children.  In the latter case activate
  // the submit button.
  $i = 1;
  do {
    if ($i == 1 
        || (isset($form_state['values']['organisation_' . ($i-1)]) 
        && $form_state['values']['organisation_' . ($i-1)] != "")) {
  	  if ($i == 1) {
  	  	// initialise by finding the unique root term for the taxonomy 
  	  	$org_vocab_object = taxonomy_vocabulary_machine_name_load('referring_organisations');
        $org_vocab_0 = taxonomy_get_tree($org_vocab_object->vid, 0, $max_depth = 1, FALSE);
        $org_type_tid = $org_vocab_0[0]->tid;
	  }
	  else {
	  	// work from the taxonomy term selected at the previous level
	  	$org_type_tid = $form_state['values']['organisation_' . ($i-1)];
	  }
	  $term_wrapper = entity_metadata_wrapper('taxonomy_term', $org_type_tid);
	  $control_title =  $term_wrapper->field_child_title->value(array('sanitize' => TRUE));
	  // If the previously selected taxonomy term has child terms, set up another control to select one
	  if (isset($control_title)&& $control_title != "") {
	  	$org_names = org_names('referring_organisations', $org_type_tid);
		$form['cascade']['organisation_' . $i ] = array(
          '#type' => 'select',
          '#title' => t($control_title),
          '#required' => 'true',
          '#empty_option' => '- select -',
          '#multiple' => false,
          '#options' => $org_names,
          '#attributes' => array('class' => array('organisation-cascade')),
          // Ajax replaces the whole set of controls to handle re-setting of the option
          // at a higher level - more than one control may need to disappear or be re-set
          '#ajax' => array(
            'callback' => 'cascade_callback',
            'wrapper' => 'cascade-div',
            'effect' => 'fade',
          ),
        );
		// If the AJAX call was triggered at the next level up in the hierarchy, this control will
		// be set to default to prompt the user to re-select.  In the meantime, though, form_state
		// will remain unchanged and may retain the value for a previous choice.
		// This would confuse logic in the next iteration unless form_state is re-set.
	    if (isset($form_state['triggering_element']['#parents']) 
	        && in_array('organisation_' . ($i-1), $form_state['triggering_element']['#parents']) 
	        && isset($form_state['values']['organisation_' . $i])) {
		  $form_state['values']['organisation_' . $i] = "";
	    }
      }
      // If the previously selected taxonomy term has no children, then we're done and the user can
      // have a commit button 
      else {
        $form['cascade']['button'] = array(
	      '#type' => 'submit',
	      '#value' => 'Register',
	    );
		// Set up for exit from the loop
	    $close_downstream = true;
		
      }
    }
    else {
      // If an option has not been chosen at the next level up, it means that the user has reset their
      // choice to the default value.  We don't need a control at this level until they've made a new
      // selection at that level and we can exit the loop.
      $close_downstream = true;
    }
	$i++ ;
  } while (!$close_downstream);
  return $form;
}

/***
 * AJAX callback to update the full set of controls 
 */
function cascade_callback($form, $form_state) {
  return $form['cascade'] ;
}

/**
 * Helper function to generate the array of options corresponding to taxonomy child elements
 * @taxonomy_name: the machine name of the taxonomy we're working with
 * @type_tid: the parent taxonomy tid
 */
function org_names ($taxonomy_name, $type_tid ) {
  $org_vocab_object = taxonomy_vocabulary_machine_name_load($taxonomy_name);
  $org_vocab = taxonomy_get_tree($org_vocab_object->vid, $type_tid, $max_depth = 1, FALSE);
  $org_names = array();
  foreach ($org_vocab as $term_object) {
  	$org_names[$term_object->tid] = $term_object -> name;
  }
  return $org_names;
}

/**
 * Validation function for referrer_setup form
 *
 */
function referrer_setup_validate ($form, &$form_state){
  //email addresses match
  if ($form_state['values']['email1'] != $form_state['values']['email2'] ) {
  	form_set_error('email2', t('Email addresses do not match'));
  }
  
  //email has correct format
  $regex = '/^(?!(?:(?:\x22?\x5C[\x00-\x7E]\x22?)|(?:\x22?[^\x5C\x22]\x22?)){255,})(?!(?:(?:\x22?\x5C[\x00-\x7E]\x22?)|(?:\x22?[^\x5C\x22]\x22?)){65,}@)(?:(?:[\x21\x23-\x27\x2A\x2B\x2D\x2F-\x39\x3D\x3F\x5E-\x7E]+)|(?:\x22(?:[\x01-\x08\x0B\x0C\x0E-\x1F\x21\x23-\x5B\x5D-\x7F]|(?:\x5C[\x00-\x7F]))*\x22))(?:\.(?:(?:[\x21\x23-\x27\x2A\x2B\x2D\x2F-\x39\x3D\x3F\x5E-\x7E]+)|(?:\x22(?:[\x01-\x08\x0B\x0C\x0E-\x1F\x21\x23-\x5B\x5D-\x7F]|(?:\x5C[\x00-\x7F]))*\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-[a-z0-9]+)*\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-[a-z0-9]+)*)|(?:\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\]))$/iD';
  $value = $form_state['values']['email1'];
  if (!preg_match($regex, $value)) {
    form_set_error('email1', t('Not a valid email address'));
  }

  //email is not a duplicate
  if (user_load_by_mail($form_state['values']['email1'])) {
  	form_set_error('email1', t('There is already a Mediation Bucks referrer with this email address'));
  }

  // First name format
  $value = $form_state['values']['first_name'];
  $regex = '/^[A-Za-z- ]+$/';
  if (!preg_match($regex, $value)) {
    form_set_error('first_name', t('Only letters, spaces and hyphens'));
  }
  
  // Last name format
  $value = $form_state['values']['last_name'];
  $regex = '/^[A-Za-z- ]+$/';
  if (!preg_match($regex, $value)) {
    form_set_error('last_name', t('Only letters, spaces and hyphens'));
  }
 
  //At least one phone number
  if ($form_state['values']['first_name'] == NULL && $form_state['values']['last_name'] == NULL) {
  	form_set_error('mobile', t('Provide at least one contact number'));
  }
  
  //Phone number has correct format
  if ($form_state['values']['phone'] != NULL) {
  	$pattern = array (
  	'/ /',
  	'/\(/',
  	'/\)/',
  	'/\+/',
  	'/\-/',
	);
	// strip out spaces, brackets, "+" and "-"
  	$value = preg_replace($pattern, '', $form_state['values']['phone']);
    $regex = '/^((44)|0)[0-9]{8,10}((Xt|XT|xT|Xt)[0-9]{1,6})?$/';
    if (!preg_match($regex, $value)) {
      form_set_error('phone', t('Incorrect format for UK phone number'));
    }
  }
  
  //Mobile number has correct format
  if ($form_state['values']['mobile'] != NULL) {
  	$pattern = array (
  	'/ /',
  	'/\(/',
  	'/\)/',
  	'/\+/',
  	'/\-/',
	);
  	// strip out spaces, brackets, "+" and "-"
  	$value = preg_replace($pattern, '', $form_state['values']['mobile']);
    $regex = '/^(07[\d]{8,12}|447[\d]{7,11})$/';
    if (!preg_match($regex, $value)) {
      form_set_error('mobile', t('Incorrect format for UK mobile number'));
    }
  }
}

/**
 * Submit function for referrer_setup form
 *
 */
function referrer_setup_submit ($form, &$form_state){
  $first_name = $form_state['values']['first_name'];
  $last_name = $form_state['values']['last_name'];
  $phone = $form_state['values']['phone'];
  $mobile = $form_state['values']['mobile'];
  $email = $form_state['values']['email1'];
  
  // Iterate from the top of the organisation hierarchy to the users final choice and
  // find the last (lowest) non-blank regex for the organisation's email domain 
  $org_vocab_object = taxonomy_vocabulary_machine_name_load('referring_organisations');
  $org_vocab_0 = taxonomy_get_tree($org_vocab_object->vid, 0, $max_depth = 1, FALSE);
  $term = $org_vocab_0[0]->tid;
  $term_wrapper = entity_metadata_wrapper('taxonomy_term', $term);
  $domain_regex_value = $term_wrapper -> field_valid_domain -> value(array('sanitize' => TRUE));
  if (isset($domain_regex_value) && $domain_regex_value != '') {
	$domain_regex = $domain_regex_value;
  }
  for ($i=1 ; $i<=3 ; $i++) {
  	if (isset($form_state['values']['organisation_' . $i])) {
	  $organisation = $form_state['values']['organisation_' . $i];
	  $term = taxonomy_term_load($organisation)->tid;
      $term_wrapper = entity_metadata_wrapper('taxonomy_term', $term);
	  $domain_regex_value = $term_wrapper -> field_valid_domain -> value(array('sanitize' => TRUE));
	  if (isset($domain_regex_value) && $domain_regex_value != '') {
	  	$domain_regex = $domain_regex_value;
	  }
    }
  }
  
  // Set up the user's name by stripping spaces and hyphens from first and last name,
  // changing all remaining to lower case and combining them with a "." separator.
  // If this has already been used, add a 1,2,3 ... to the end - lowest suffix value for uniqueness.  
  $regex = array(
   '/ /',
   '/\-/',
  );
  $name = strtolower(preg_replace($regex, '', $first_name )) . '.' . strtolower(preg_replace($regex, '', $last_name ));
  $referrer_role = user_role_load_by_name('referrer');
  $referrer_rid = $referrer_role->rid;
  
  $i='';
  if (user_load_by_name($name)) {
  	$i = 0;
  	do {
  	  $i++;
  	} while (user_load_by_name($name . $i));
  }
  $name = $name . $i;
  
  // This will generate a random password.
  $password = user_password(8);
  
  // If the email address matches the domain for the selected organisation
  // the account can be set live immediately.  Otherwise the user's status
  // with the organisation will need to be checked before they can use the account
  $account_status = preg_match('/' . $domain_regex . '/', $email);
  //set up the user fields
  $fields = array(
    'name' => $name,
    'mail' => $email,
    'pass' => $password,
    'status' => $account_status,
    'roles' => array(
      DRUPAL_AUTHENTICATED_RID => 'authenticated user',
      $referrer_rid => 'referrer',
    ),
  );
 
  //the first parameter is left blank so a new user is created
  $account = user_save('', $fields);
 
  // Update the custom fields, password 
  $account->password = $fields['pass'];
  $account_wrapper = entity_metadata_wrapper('user', $account);
  $account_wrapper->field_phone->set($phone);
  $account_wrapper->field_mobile->set($mobile);
  $account_wrapper->field_first_name->set($first_name);
  $account_wrapper->field_last_name->set($last_name);
  $account_wrapper->field_organisation->set($organisation);
  $account_wrapper->save();
 
  // Send the e-mail through the user module if the account status is live
  // Display an acknowledgement page relevant to account status 
  if ($account_status) {
    drupal_mail('user', 'register_no_approval_required', $email, NULL, array('account' => $account), variable_get('site_mail'));
    $form_state['redirect'] = 'registration-confirmed';
  }
  else {
  	$form_state['redirect'] = 'registration-pending';
  }
}
